/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_H
#define Service_H

#include <thrift/TDispatchProcessor.h>
#include "example_types.h"



class ServiceIf {
 public:
  virtual ~ServiceIf() {}
  virtual void fun1(const int32_t a, const std::string& b) = 0;
  virtual void fun2(std::string& _return) = 0;
  virtual int32_t add(const int32_t a, const int32_t b) = 0;
};

class ServiceIfFactory {
 public:
  typedef ServiceIf Handler;

  virtual ~ServiceIfFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceIf* /* handler */) = 0;
};

class ServiceIfSingletonFactory : virtual public ServiceIfFactory {
 public:
  ServiceIfSingletonFactory(const boost::shared_ptr<ServiceIf>& iface) : iface_(iface) {}
  virtual ~ServiceIfSingletonFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServiceIf> iface_;
};

class ServiceNull : virtual public ServiceIf {
 public:
  virtual ~ServiceNull() {}
  void fun1(const int32_t /* a */, const std::string& /* b */) {
    return;
  }
  void fun2(std::string& /* _return */) {
    return;
  }
  int32_t add(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Service_fun1_args__isset {
  _Service_fun1_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _Service_fun1_args__isset;

class Service_fun1_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Service_fun1_args(const Service_fun1_args&);
  Service_fun1_args& operator=(const Service_fun1_args&);
  Service_fun1_args() : a(0), b() {
  }

  virtual ~Service_fun1_args() throw();
  int32_t a;
  std::string b;

  _Service_fun1_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const std::string& val);

  bool operator == (const Service_fun1_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Service_fun1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_fun1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun1_args& obj);
};


class Service_fun1_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~Service_fun1_pargs() throw();
  const int32_t* a;
  const std::string* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun1_pargs& obj);
};


class Service_fun1_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Service_fun1_result(const Service_fun1_result&);
  Service_fun1_result& operator=(const Service_fun1_result&);
  Service_fun1_result() {
  }

  virtual ~Service_fun1_result() throw();

  bool operator == (const Service_fun1_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_fun1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_fun1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun1_result& obj);
};


class Service_fun1_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Service_fun1_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Service_fun1_presult& obj);
};


class Service_fun2_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Service_fun2_args(const Service_fun2_args&);
  Service_fun2_args& operator=(const Service_fun2_args&);
  Service_fun2_args() {
  }

  virtual ~Service_fun2_args() throw();

  bool operator == (const Service_fun2_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Service_fun2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_fun2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun2_args& obj);
};


class Service_fun2_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Service_fun2_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun2_pargs& obj);
};

typedef struct _Service_fun2_result__isset {
  _Service_fun2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_fun2_result__isset;

class Service_fun2_result {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};

  Service_fun2_result(const Service_fun2_result&);
  Service_fun2_result& operator=(const Service_fun2_result&);
  Service_fun2_result() : success() {
  }

  virtual ~Service_fun2_result() throw();
  std::string success;
  Exception e;

  _Service_fun2_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_fun2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_fun2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_fun2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_fun2_result& obj);
};

typedef struct _Service_fun2_presult__isset {
  _Service_fun2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_fun2_presult__isset;

class Service_fun2_presult {
 public:

  static const char* ascii_fingerprint; // = "FB3D66E547AE5D7F8EB046D752ECF5C1";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x3D,0x66,0xE5,0x47,0xAE,0x5D,0x7F,0x8E,0xB0,0x46,0xD7,0x52,0xEC,0xF5,0xC1};


  virtual ~Service_fun2_presult() throw();
  std::string* success;
  Exception e;

  _Service_fun2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Service_fun2_presult& obj);
};

typedef struct _Service_add_args__isset {
  _Service_add_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _Service_add_args__isset;

class Service_add_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Service_add_args(const Service_add_args&);
  Service_add_args& operator=(const Service_add_args&);
  Service_add_args() : a(0), b(0) {
  }

  virtual ~Service_add_args() throw();
  int32_t a;
  int32_t b;

  _Service_add_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const Service_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const Service_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_add_args& obj);
};


class Service_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~Service_add_pargs() throw();
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_add_pargs& obj);
};

typedef struct _Service_add_result__isset {
  _Service_add_result__isset() : success(false) {}
  bool success :1;
} _Service_add_result__isset;

class Service_add_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Service_add_result(const Service_add_result&);
  Service_add_result& operator=(const Service_add_result&);
  Service_add_result() : success(0) {
  }

  virtual ~Service_add_result() throw();
  int32_t success;

  _Service_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Service_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Service_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Service_add_result& obj);
};

typedef struct _Service_add_presult__isset {
  _Service_add_presult__isset() : success(false) {}
  bool success :1;
} _Service_add_presult__isset;

class Service_add_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Service_add_presult() throw();
  int32_t* success;

  _Service_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Service_add_presult& obj);
};

class ServiceClient : virtual public ServiceIf {
 public:
  ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fun1(const int32_t a, const std::string& b);
  void send_fun1(const int32_t a, const std::string& b);
  void recv_fun1();
  void fun2(std::string& _return);
  void send_fun2();
  void recv_fun2(std::string& _return);
  int32_t add(const int32_t a, const int32_t b);
  void send_add(const int32_t a, const int32_t b);
  int32_t recv_add();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fun1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fun2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceProcessor(boost::shared_ptr<ServiceIf> iface) :
    iface_(iface) {
    processMap_["fun1"] = &ServiceProcessor::process_fun1;
    processMap_["fun2"] = &ServiceProcessor::process_fun2;
    processMap_["add"] = &ServiceProcessor::process_add;
  }

  virtual ~ServiceProcessor() {}
};

class ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceProcessorFactory(const ::boost::shared_ptr< ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServiceIfFactory > handlerFactory_;
};

class ServiceMultiface : virtual public ServiceIf {
 public:
  ServiceMultiface(std::vector<boost::shared_ptr<ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServiceIf> > ifaces_;
  ServiceMultiface() {}
  void add(boost::shared_ptr<ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fun1(const int32_t a, const std::string& b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fun1(a, b);
    }
    ifaces_[i]->fun1(a, b);
  }

  void fun2(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fun2(_return);
    }
    ifaces_[i]->fun2(_return);
    return;
  }

  int32_t add(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

};



#endif
