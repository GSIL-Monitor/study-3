/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef std::vector<class People>  Peoples;

class People;

class Nation;

class Exception;

typedef struct _People__isset {
  _People__isset() : name(false), age(false), male(false) {}
  bool name :1;
  bool age :1;
  bool male :1;
} _People__isset;

class People {
 public:

  static const char* ascii_fingerprint; // = "4ECC75419270D065D1AD939BF064A2C7";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xCC,0x75,0x41,0x92,0x70,0xD0,0x65,0xD1,0xAD,0x93,0x9B,0xF0,0x64,0xA2,0xC7};

  People(const People&);
  People& operator=(const People&);
  People() : name(), age(0), male(0) {
  }

  virtual ~People() throw();
  std::string name;
  int16_t age;
  bool male;

  _People__isset __isset;

  void __set_name(const std::string& val);

  void __set_age(const int16_t val);

  void __set_male(const bool val);

  bool operator == (const People & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(male == rhs.male))
      return false;
    return true;
  }
  bool operator != (const People &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const People & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const People& obj);
};

void swap(People &a, People &b);

typedef struct _Nation__isset {
  _Nation__isset() : peoples(false) {}
  bool peoples :1;
} _Nation__isset;

class Nation {
 public:

  static const char* ascii_fingerprint; // = "CEC42DA1585E4B9B54818010EA281AD4";
  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xC4,0x2D,0xA1,0x58,0x5E,0x4B,0x9B,0x54,0x81,0x80,0x10,0xEA,0x28,0x1A,0xD4};

  Nation(const Nation&);
  Nation& operator=(const Nation&);
  Nation() {
  }

  virtual ~Nation() throw();
  std::vector<People>  peoples;

  _Nation__isset __isset;

  void __set_peoples(const std::vector<People> & val);

  bool operator == (const Nation & rhs) const
  {
    if (!(peoples == rhs.peoples))
      return false;
    return true;
  }
  bool operator != (const Nation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Nation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Nation& obj);
};

void swap(Nation &a, Nation &b);

typedef struct _Exception__isset {
  _Exception__isset() : message(false) {}
  bool message :1;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : message() {
  }

  virtual ~Exception() throw();
  std::string message;

  _Exception__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Exception& obj);
};

void swap(Exception &a, Exception &b);



#endif
